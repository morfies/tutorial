

项目切换到cdn serve静态资源，原来所有服务端渲染的jade模板全部走html，直接走cdn，静态页面再通过js ajax方式访问我们自己服务器拿动态数据，走客户端渲染模式。
 
以前的方式就是jsonp， 但在已经开发趋于稳定的项目而言，切换为jsonp显然是不能接受的，jsonp是需要你修改业务代码已支持前端callback的，虽然几行代码都能搞定，但每个服务端接口都得改，或者，你这些服务端接口有其他地方以非jsonp的方式调用，那么还不能允许你直接修改这些接口，此时你需要添加新接口，显然，这更是不好的，你的代码会充满重复逻辑。
 
(参考资料: http://stackoverflow.com/questions/10636611/how-does-access-control-allow-origin-header-work )
那么cors来拯救你
 
同源的定义： 协议+域名+端口号，这三者决定两个url是否同源。
当用js ajax从网站A访问网站B的内容时，浏览器默认行为认为这是跨域的不安全访问而限制住，那么，可以在网站B返回内容的server接口中，添加返回头'Access-Control-Allow-Origin'，如果value设为*，则表明任何其他网站都可以以跨域的方式访问该接口，如果你需要限定特定的源访问，那么，value里面列出你的源就好了。
 
不过有个关键点需要理解，就是浏览器的同源限制策略是如何工作的呢？
网站A请求网站B的资源，浏览器总是会在网络层面上请求该资源，并且会在这里发生对同源策略的检查工作，如果网站A不被B允许，浏览器会在这里触发XMLHttpRequest error错误，并且拦截住该请求的内容。
 
简单解释是这样的，详细的解释请看参考资料
